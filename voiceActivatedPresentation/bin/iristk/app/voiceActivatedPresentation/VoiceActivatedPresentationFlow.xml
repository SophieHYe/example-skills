<?xml version="1.0" encoding="utf-8"?>
<flow name="VoiceActivatedPresentationFlow" package="iristk.app.voiceActivatedPresentation" 
	initial="state0" xmlns:this="iristk.app.voiceActivatedPresentation.VoiceActivatedPresentationFlow" xmlns="iristk.flow" 
	xmlns:p="iristk.flow.param" xmlns:agent="iristk.situated.SystemAgentFlow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="iristk.flow flow.xsd iristk.situated.SystemAgentFlow SystemAgentFlow.xsd">
	
	<param name="agent" type="iristk.situated.SystemAgentFlow"/>
	
	<var name="system" type="iristk.situated.SystemAgent" value="agent.getSystemAgent()"/> 
	<var name="nextState" type="String"/>

	<state id="state0" extends="Triggers">
		<onentry>
			<agent:say>Welcome to this example voice activated linear presentation. This is state 1, to go to the next step you have to say a fruit or go or next</agent:say>
			<agent:listen/>
		</onentry>
	</state>
	
	<state id="state1" extends="Triggers">
		<onentry>
			<agent:say>State 1. Same thing again, to visualize how you can have the same utterance triggering in several states. Say a fruit or go or next.</agent:say>
			<agent:listen/>
		</onentry>
	</state>
	
	<state id="state2" extends="Triggers">
		<onentry>
			<agent:say>State 2. Say a color to go to the final step. Note in the grammar how this single-state trigger phase can be simplified compared to the multi-state fruits.</agent:say>
			<agent:listen/>
		</onentry>
	</state>
	
	<!-- Final state, does NOT extend Triggers state -->
	<state id="state3">
		<onentry>
			<agent:say>Final state. No trigger exists in this state since the state does not extend the Triggers state. Check out the code to learn about how this state works.</agent:say>
		</onentry>
	</state>
	
	<state id="Triggers">
	    <!-- Checks if we get the skill.next event (triggered by a trigger-word) -->
		<onevent name="sense.skill.next">
    	    <!-- gets the next state, convention with prefix and increment number MUST be used when naming states -->
		    <exec>
		        String prefix = super.getClass().getSimpleName().replaceAll("[0-9]", "");
		        int nextStateNumber = (Integer.parseInt(super.getClass().getSimpleName().replaceAll("[^0-9]", "")) + 1);
		        nextState = prefix + nextStateNumber
		    </exec>
			<goto expr="getState(nextState)"/>
		</onevent>
	
		<!-- Checks if the utterance is a trigger and if we are in the right state to trigger it (determined by grammar) -->
		<onevent name="sense.user.speak**" cond="event?:sem:trigger">
			<if cond="eq(event:sem:trigger, 'any') or eq(event:sem:trigger, super.getClass().getSimpleName()) or asRecord(event:sem:trigger).has(super.getClass().getSimpleName())">
			    <raise event="sense.skill.next"/>
		    <else/>
		        <agent:listen/>
			</if>
		</onevent>
		
		<!-- Fallback, if no hit above we listen again -->
		<onevent name="sense.user.speak**">
			<agent:listen/>
		</onevent>
		
		<!-- If silent, we listen again -->
		<onevent name="sense.user.silence">
			<agent:listen/>
		</onevent>
	</state>
	
</flow>